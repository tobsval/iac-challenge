---
# https://docs.docker.com/engine/security/protect-access/#use-tls-https-to-protect-the-docker-daemon-socket
- name: Take necessary steps to secure dockerd over HTTPS
  hosts: all
  become: true
  gather_facts: false
  tasks:
  - name: Obtain VM Hostname
    command: "hostname"
    register: hostname_out
    changed_when: "hostname_out.rc != 2"

  - name: Obtain IPv4 address of VM
    shell: "set -o pipefail && ip addr | grep 192 | awk '{print $2}' | sed 's/...$//'"
    register: ipv4_out
    changed_when: "ipv4_out.rc != 2"

  - name: Create /docker/ssl
    file:
      path: /docker/ssl
      state: directory
      mode: '0644'

  - name: Create $HOME/.docker
    file:
      path: $HOME/.docker
      state: directory
      mode: '0644'

  # TODO: Maybe find a way to generate certs on the machines directly instead of provisioning them from the local machine
  # Server certs config
  - name: Include server TLS certs
    template:
      src: "{{ item.src }}"
      dest: /docker/ssl/{{ item.dest }}
      mode: '0400'
    loop:
      - { src: '../templates/tls-certs/server/ca.pem', dest: 'ca.pem'}
      - { src: '../templates/tls-certs/server/ca-key.pem', dest: 'ca-key.pem'}
      - { src: '../templates/tls-certs/server/server-key.pem', dest: 'server-key.pem'}
      - { src: '../templates/tls-certs/server/server-cert.pem', dest: 'server-cert.pem'}
    when: hostname_out.stdout == 'docker1'

  # Client certs config
  - name: Include client TLS certs
    template:
      src: "{{ item.src }}"
      dest: $HOME/.docker/{{ item.dest }}
      mode: '0400'
    loop:
      - { src: '../templates/tls-certs/client/ca.pem', dest: 'ca.pem'}
      - { src: '../templates/tls-certs/client/key.pem', dest: 'key.pem'}
      - { src: '../templates/tls-certs/client/cert.pem', dest: 'cert.pem'}
    when: hostname_out.stdout != 'docker1'
